// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	segment "github.com/POMBNK/avito_test_task/internal/segment"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CheckSegmentsTTL provides a mock function with given fields: ctx
func (_m *Service) CheckSegmentsTTL(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, dto
func (_m *Service) Create(ctx context.Context, dto segment.ToCreateSegmentDTO) (string, error) {
	ret := _m.Called(ctx, dto)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, segment.ToCreateSegmentDTO) (string, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, segment.ToCreateSegmentDTO) string); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, segment.ToCreateSegmentDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, dto
func (_m *Service) Delete(ctx context.Context, dto segment.ToDeleteSegmentDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, segment.ToDeleteSegmentDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditUserToSegments provides a mock function with given fields: ctx, dto
func (_m *Service) EditUserToSegments(ctx context.Context, dto segment.ToUpdateUsersSegmentsDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, segment.ToUpdateUsersSegmentsDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveSegments provides a mock function with given fields: ctx, userID
func (_m *Service) GetActiveSegments(ctx context.Context, userID string) ([]segment.ActiveSegments, error) {
	ret := _m.Called(ctx, userID)

	var r0 []segment.ActiveSegments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]segment.ActiveSegments, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []segment.ActiveSegments); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]segment.ActiveSegments)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeCSVUserReport provides a mock function with given fields: ctx, userID, dto
func (_m *Service) MakeCSVUserReport(ctx context.Context, userID string, dto segment.ReportDateDTO) (segment.ReportFile, error) {
	ret := _m.Called(ctx, userID, dto)

	var r0 segment.ReportFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, segment.ReportDateDTO) (segment.ReportFile, error)); ok {
		return rf(ctx, userID, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, segment.ReportDateDTO) segment.ReportFile); ok {
		r0 = rf(ctx, userID, dto)
	} else {
		r0 = ret.Get(0).(segment.ReportFile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, segment.ReportDateDTO) error); ok {
		r1 = rf(ctx, userID, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeCSVUserReportOptimized provides a mock function with given fields: ctx, userID, dto
func (_m *Service) MakeCSVUserReportOptimized(ctx context.Context, userID string, dto segment.ReportDateDTO) (segment.ReportFile, error) {
	ret := _m.Called(ctx, userID, dto)

	var r0 segment.ReportFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, segment.ReportDateDTO) (segment.ReportFile, error)); ok {
		return rf(ctx, userID, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, segment.ReportDateDTO) segment.ReportFile); ok {
		r0 = rf(ctx, userID, dto)
	} else {
		r0 = ret.Get(0).(segment.ReportFile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, segment.ReportDateDTO) error); ok {
		r1 = rf(ctx, userID, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
